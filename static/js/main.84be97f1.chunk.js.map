{"version":3,"sources":["components/LocationMarker.js","components/LocationInfoBox.js","components/Map.js","components/spinner.gif","components/Loader.js","App.js","reportWebVitals.js","index.js"],"names":["LocationMarker","lat","lng","onClick","className","icon","locationIcon","LocationInfoBox","info","id","title","Map","eventData","center","zoom","useState","locationInfo","setLocationInfo","markers","map","ev","categories","geometries","coordinates","bootstrapURLKeys","key","defaultCenter","defaultZoom","defaultProps","Loader","src","spinner","alt","App","setEventData","loading","setLoading","useEffect","a","fetch","res","json","events","fetchEvents","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQAWeA,EARQ,SAAC,GAA0B,EAAxBC,IAAwB,EAAnBC,IAAoB,IAAfC,EAAc,EAAdA,QAChC,OACI,qBAAKC,UAAU,kBAAkBD,QAASA,EAA1C,SACI,cAAC,OAAD,CAAME,KAAMC,IAAcF,UAAU,qBCOjCG,EAZS,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACvB,OACI,sBAAKJ,UAAU,gBAAf,UACI,qDACA,+BACI,sCAAQ,iCAAUI,EAAKC,QACvB,yCAAW,iCAAUD,EAAKE,kBCFpCC,EAAM,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,KAAW,EACDC,mBAAS,MADR,mBAClCC,EADkC,KACpBC,EADoB,KAGnCC,EAAUN,EAAUO,KAAI,SAAAC,GAC1B,OAA2B,IAAxBA,EAAGC,WAAW,GAAGZ,GACT,cAAC,EAAD,CAAgBR,IAAKmB,EAAGE,WAAW,GAAGC,YAAY,GAAIrB,IAC5DkB,EAAGE,WAAW,GAAGC,YAAY,GAAIpB,QAAS,kBAAMc,EAAgB,CAAER,GAAIW,EAAGX,GAC1EC,MAAOU,EAAGV,WAEP,QAGX,OACI,sBAAKN,UAAU,MAAf,UACI,cAAC,IAAD,CACIoB,iBAAkB,CAAEC,IACpB,2CACAC,cAAgBb,EAChBc,YAAcb,EAJlB,SAMKI,IAEJF,GAAgB,cAAC,EAAD,CAAiBR,KAAMQ,QAKpDL,EAAIiB,aAAe,CACff,OAAQ,CACJZ,IAAK,QACLC,KAAM,UAEVY,KAAM,GAGKH,QCxCA,MAA0B,oCCW1BkB,EATA,WACX,OACI,sBAAKzB,UAAU,SAAf,UACI,qBAAK0B,IAAKC,EAASC,IAAI,YACvB,oDCyBGC,MA1Bf,WAAgB,IAAD,EACqBlB,mBAAS,IAD9B,mBACNH,EADM,KACKsB,EADL,OAEiBnB,oBAAS,GAF1B,mBAENoB,EAFM,KAEGC,EAFH,KAkBb,OAdAC,qBAAU,YACS,uCAAG,gCAAAC,EAAA,6DAClBF,GAAW,GADO,SAEAG,MAAM,mDAFN,cAEZC,EAFY,gBAGOA,EAAIC,OAHX,gBAGVC,EAHU,EAGVA,OAERR,EAAaQ,GACbN,GAAW,GANO,4CAAH,qDASjBO,KAEC,IAGD,8BAEIR,EAA0C,cAAC,EAAD,IAAhC,cAAC,EAAD,CAAKvB,UAAWA,OCdnBgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.84be97f1.chunk.js","sourcesContent":["import { Icon } from '@iconify/react'\nimport locationIcon from '@iconify/icons-mdi/fire-alert'\n\nconst LocationMarker = ({ lat, lng, onClick }) => {\n    return (\n        <div className=\"location-marker\" onClick={onClick}>\n            <Icon icon={locationIcon} className=\"location-icon\" />\n        </div>\n    )\n}\n\nexport default LocationMarker\n","\nconst LocationInfoBox = ({ info }) => {\n    return (\n        <div className=\"location-info\">\n            <h2>Event Location Info</h2>\n            <ul>\n                <li>ID: <strong>{ info.id }</strong></li>\n                <li>TITLE: <strong>{ info.title }</strong></li>\n            </ul>           \n        </div>\n    )\n}\n\nexport default LocationInfoBox\n","import { useState } from 'react'\nimport GoogleMapReact from 'google-map-react'\nimport LocationMarker from './LocationMarker'\nimport LocationInfoBox from './LocationInfoBox'\n\nconst Map = ({ eventData, center, zoom }) => {\n    const [locationInfo, setLocationInfo] = useState(null)\n    \n    const markers = eventData.map(ev => {\n        if(ev.categories[0].id === 8) {\n            return <LocationMarker lat={ev.geometries[0].coordinates[1]} lng=\n            {ev.geometries[0].coordinates[0]} onClick={() => setLocationInfo({ id: ev.id,\n            title: ev.title })} />\n        }\n        return null\n    })\n\n    return (\n        <div className=\"map\">\n            <GoogleMapReact\n                bootstrapURLKeys={{ key: \n                'AIzaSyDh72kFqdg1zkyInHEy6A0A5dGbPJR5w8Y' }}\n                defaultCenter={ center }\n                defaultZoom={ zoom }\n            >\n                {markers}\n            </GoogleMapReact>\n            {locationInfo && <LocationInfoBox info={locationInfo} /> }\n        </div>\n    )\n}\n\nMap.defaultProps = {\n    center: {\n        lat: 42.3265,\n        lng: -122.8756\n    },\n    zoom: 6\n}\n\nexport default Map\n","export default __webpack_public_path__ + \"static/media/spinner.1155fc46.gif\";","import spinner from './spinner.gif'\n\nconst Loader = () => {\n    return (\n        <div className=\"loader\">\n            <img src={spinner} alt=\"Loading\" />\n            <h1> Fetching Data</h1>\n        </div>\n    )\n}\n\nexport default Loader\n","import { useState, useEffect } from 'react'\nimport Map from './components/Map'\nimport Loader from './components/Loader'\n// import Header from './components/Header'\n\nfunction App() {\n  const [eventData, setEventData] = useState([])\n  const [loading, setLoading] = useState(false)\n\n  useEffect(() => {\n    const fetchEvents = async () => {\n      setLoading(true)\n      const res = await fetch('https://eonet.sci.gsfc.nasa.gov/api/v2.1/events')\n      const { events } = await res.json()\n\n      setEventData(events)\n      setLoading(false)\n    }\n\n    fetchEvents()\n\n  }, [])\n\n  return (\n    <div>\n      {/* <Header /> */}\n     { !loading ? <Map eventData={eventData} /> : <Loader /> }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}